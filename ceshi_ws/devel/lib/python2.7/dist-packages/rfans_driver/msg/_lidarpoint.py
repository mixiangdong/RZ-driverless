# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rfans_driver/lidarpoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lidarpoint(genpy.Message):
  _md5sum = "a84347ea08c5142003aeb6f79e914d56"
  _type = "rfans_driver/lidarpoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#大写表示左侧红锥桶，小写表示右侧蓝色锥桶;双写字母例如Aa表示黄色起始锥桶
float64 A_X
float64 A_Y
float64 B_X
float64 B_Y
float64 a_x
float64 a_y
float64 b_x
float64 b_y
float64 Aa_Xx
float64 Aa_Yy
float64 Bb_Xx
float64 Bb_Yy"""
  __slots__ = ['A_X','A_Y','B_X','B_Y','a_x','a_y','b_x','b_y','Aa_Xx','Aa_Yy','Bb_Xx','Bb_Yy']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       A_X,A_Y,B_X,B_Y,a_x,a_y,b_x,b_y,Aa_Xx,Aa_Yy,Bb_Xx,Bb_Yy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lidarpoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.A_X is None:
        self.A_X = 0.
      if self.A_Y is None:
        self.A_Y = 0.
      if self.B_X is None:
        self.B_X = 0.
      if self.B_Y is None:
        self.B_Y = 0.
      if self.a_x is None:
        self.a_x = 0.
      if self.a_y is None:
        self.a_y = 0.
      if self.b_x is None:
        self.b_x = 0.
      if self.b_y is None:
        self.b_y = 0.
      if self.Aa_Xx is None:
        self.Aa_Xx = 0.
      if self.Aa_Yy is None:
        self.Aa_Yy = 0.
      if self.Bb_Xx is None:
        self.Bb_Xx = 0.
      if self.Bb_Yy is None:
        self.Bb_Yy = 0.
    else:
      self.A_X = 0.
      self.A_Y = 0.
      self.B_X = 0.
      self.B_Y = 0.
      self.a_x = 0.
      self.a_y = 0.
      self.b_x = 0.
      self.b_y = 0.
      self.Aa_Xx = 0.
      self.Aa_Yy = 0.
      self.Bb_Xx = 0.
      self.Bb_Yy = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.A_X, _x.A_Y, _x.B_X, _x.B_Y, _x.a_x, _x.a_y, _x.b_x, _x.b_y, _x.Aa_Xx, _x.Aa_Yy, _x.Bb_Xx, _x.Bb_Yy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.A_X, _x.A_Y, _x.B_X, _x.B_Y, _x.a_x, _x.a_y, _x.b_x, _x.b_y, _x.Aa_Xx, _x.Aa_Yy, _x.Bb_Xx, _x.Bb_Yy,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.A_X, _x.A_Y, _x.B_X, _x.B_Y, _x.a_x, _x.a_y, _x.b_x, _x.b_y, _x.Aa_Xx, _x.Aa_Yy, _x.Bb_Xx, _x.Bb_Yy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.A_X, _x.A_Y, _x.B_X, _x.B_Y, _x.a_x, _x.a_y, _x.b_x, _x.b_y, _x.Aa_Xx, _x.Aa_Yy, _x.Bb_Xx, _x.Bb_Yy,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
