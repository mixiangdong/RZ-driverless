// Generated by gencpp from file rfans_driver/point_zx.msg
// DO NOT EDIT!


#ifndef RFANS_DRIVER_MESSAGE_POINT_ZX_H
#define RFANS_DRIVER_MESSAGE_POINT_ZX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfans_driver
{
template <class ContainerAllocator>
struct point_zx_
{
  typedef point_zx_<ContainerAllocator> Type;

  point_zx_()
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)
    , x5(0.0)
    , y5(0.0)
    , x6(0.0)
    , y6(0.0)  {
    }
  point_zx_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)
    , x5(0.0)
    , y5(0.0)
    , x6(0.0)
    , y6(0.0)  {
  (void)_alloc;
    }



   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _x3_type;
  _x3_type x3;

   typedef double _y3_type;
  _y3_type y3;

   typedef double _x4_type;
  _x4_type x4;

   typedef double _y4_type;
  _y4_type y4;

   typedef double _x5_type;
  _x5_type x5;

   typedef double _y5_type;
  _y5_type y5;

   typedef double _x6_type;
  _x6_type x6;

   typedef double _y6_type;
  _y6_type y6;





  typedef boost::shared_ptr< ::rfans_driver::point_zx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfans_driver::point_zx_<ContainerAllocator> const> ConstPtr;

}; // struct point_zx_

typedef ::rfans_driver::point_zx_<std::allocator<void> > point_zx;

typedef boost::shared_ptr< ::rfans_driver::point_zx > point_zxPtr;
typedef boost::shared_ptr< ::rfans_driver::point_zx const> point_zxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfans_driver::point_zx_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfans_driver::point_zx_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rfans_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rfans_driver': ['/home/mixiangdong/ceshi_ws/src/rfans_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::point_zx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::point_zx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::point_zx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::point_zx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::point_zx_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::point_zx_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfans_driver::point_zx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "954e85bbf6ced39ad18ebcb8b2458d7e";
  }

  static const char* value(const ::rfans_driver::point_zx_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x954e85bbf6ced39aULL;
  static const uint64_t static_value2 = 0xd18ebcb8b2458d7eULL;
};

template<class ContainerAllocator>
struct DataType< ::rfans_driver::point_zx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfans_driver/point_zx";
  }

  static const char* value(const ::rfans_driver::point_zx_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfans_driver::point_zx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#存储锥桶xy信息，无顺序\n\
\n\
float64 x1\n\
float64 y1\n\
float64 x2\n\
float64 y2\n\
float64 x3\n\
float64 y3\n\
float64 x4\n\
float64 y4\n\
float64 x5\n\
float64 y5\n\
float64 x6\n\
float64 y6\n\
";
  }

  static const char* value(const ::rfans_driver::point_zx_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfans_driver::point_zx_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
      stream.next(m.x5);
      stream.next(m.y5);
      stream.next(m.x6);
      stream.next(m.y6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_zx_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfans_driver::point_zx_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfans_driver::point_zx_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<double>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<double>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<double>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<double>::stream(s, indent + "  ", v.y4);
    s << indent << "x5: ";
    Printer<double>::stream(s, indent + "  ", v.x5);
    s << indent << "y5: ";
    Printer<double>::stream(s, indent + "  ", v.y5);
    s << indent << "x6: ";
    Printer<double>::stream(s, indent + "  ", v.x6);
    s << indent << "y6: ";
    Printer<double>::stream(s, indent + "  ", v.y6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFANS_DRIVER_MESSAGE_POINT_ZX_H
