// Generated by gencpp from file rfans_driver/lidarpoint.msg
// DO NOT EDIT!


#ifndef RFANS_DRIVER_MESSAGE_LIDARPOINT_H
#define RFANS_DRIVER_MESSAGE_LIDARPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfans_driver
{
template <class ContainerAllocator>
struct lidarpoint_
{
  typedef lidarpoint_<ContainerAllocator> Type;

  lidarpoint_()
    : A_X(0.0)
    , A_Y(0.0)
    , B_X(0.0)
    , B_Y(0.0)
    , a_x(0.0)
    , a_y(0.0)
    , b_x(0.0)
    , b_y(0.0)
    , Aa_Xx(0.0)
    , Aa_Yy(0.0)
    , Bb_Xx(0.0)
    , Bb_Yy(0.0)  {
    }
  lidarpoint_(const ContainerAllocator& _alloc)
    : A_X(0.0)
    , A_Y(0.0)
    , B_X(0.0)
    , B_Y(0.0)
    , a_x(0.0)
    , a_y(0.0)
    , b_x(0.0)
    , b_y(0.0)
    , Aa_Xx(0.0)
    , Aa_Yy(0.0)
    , Bb_Xx(0.0)
    , Bb_Yy(0.0)  {
  (void)_alloc;
    }



   typedef double _A_X_type;
  _A_X_type A_X;

   typedef double _A_Y_type;
  _A_Y_type A_Y;

   typedef double _B_X_type;
  _B_X_type B_X;

   typedef double _B_Y_type;
  _B_Y_type B_Y;

   typedef double _a_x_type;
  _a_x_type a_x;

   typedef double _a_y_type;
  _a_y_type a_y;

   typedef double _b_x_type;
  _b_x_type b_x;

   typedef double _b_y_type;
  _b_y_type b_y;

   typedef double _Aa_Xx_type;
  _Aa_Xx_type Aa_Xx;

   typedef double _Aa_Yy_type;
  _Aa_Yy_type Aa_Yy;

   typedef double _Bb_Xx_type;
  _Bb_Xx_type Bb_Xx;

   typedef double _Bb_Yy_type;
  _Bb_Yy_type Bb_Yy;





  typedef boost::shared_ptr< ::rfans_driver::lidarpoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfans_driver::lidarpoint_<ContainerAllocator> const> ConstPtr;

}; // struct lidarpoint_

typedef ::rfans_driver::lidarpoint_<std::allocator<void> > lidarpoint;

typedef boost::shared_ptr< ::rfans_driver::lidarpoint > lidarpointPtr;
typedef boost::shared_ptr< ::rfans_driver::lidarpoint const> lidarpointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfans_driver::lidarpoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfans_driver::lidarpoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rfans_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rfans_driver': ['/home/mixiangdong/ceshi_ws/src/rfans_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::lidarpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::lidarpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::lidarpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::lidarpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::lidarpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::lidarpoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfans_driver::lidarpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a84347ea08c5142003aeb6f79e914d56";
  }

  static const char* value(const ::rfans_driver::lidarpoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa84347ea08c51420ULL;
  static const uint64_t static_value2 = 0x03aeb6f79e914d56ULL;
};

template<class ContainerAllocator>
struct DataType< ::rfans_driver::lidarpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfans_driver/lidarpoint";
  }

  static const char* value(const ::rfans_driver::lidarpoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfans_driver::lidarpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#大写表示左侧红锥桶，小写表示右侧蓝色锥桶;双写字母例如Aa表示黄色起始锥桶\n\
float64 A_X\n\
float64 A_Y\n\
float64 B_X\n\
float64 B_Y\n\
float64 a_x\n\
float64 a_y\n\
float64 b_x\n\
float64 b_y\n\
float64 Aa_Xx\n\
float64 Aa_Yy\n\
float64 Bb_Xx\n\
float64 Bb_Yy\n\
";
  }

  static const char* value(const ::rfans_driver::lidarpoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfans_driver::lidarpoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A_X);
      stream.next(m.A_Y);
      stream.next(m.B_X);
      stream.next(m.B_Y);
      stream.next(m.a_x);
      stream.next(m.a_y);
      stream.next(m.b_x);
      stream.next(m.b_y);
      stream.next(m.Aa_Xx);
      stream.next(m.Aa_Yy);
      stream.next(m.Bb_Xx);
      stream.next(m.Bb_Yy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidarpoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfans_driver::lidarpoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfans_driver::lidarpoint_<ContainerAllocator>& v)
  {
    s << indent << "A_X: ";
    Printer<double>::stream(s, indent + "  ", v.A_X);
    s << indent << "A_Y: ";
    Printer<double>::stream(s, indent + "  ", v.A_Y);
    s << indent << "B_X: ";
    Printer<double>::stream(s, indent + "  ", v.B_X);
    s << indent << "B_Y: ";
    Printer<double>::stream(s, indent + "  ", v.B_Y);
    s << indent << "a_x: ";
    Printer<double>::stream(s, indent + "  ", v.a_x);
    s << indent << "a_y: ";
    Printer<double>::stream(s, indent + "  ", v.a_y);
    s << indent << "b_x: ";
    Printer<double>::stream(s, indent + "  ", v.b_x);
    s << indent << "b_y: ";
    Printer<double>::stream(s, indent + "  ", v.b_y);
    s << indent << "Aa_Xx: ";
    Printer<double>::stream(s, indent + "  ", v.Aa_Xx);
    s << indent << "Aa_Yy: ";
    Printer<double>::stream(s, indent + "  ", v.Aa_Yy);
    s << indent << "Bb_Xx: ";
    Printer<double>::stream(s, indent + "  ", v.Bb_Xx);
    s << indent << "Bb_Yy: ";
    Printer<double>::stream(s, indent + "  ", v.Bb_Yy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFANS_DRIVER_MESSAGE_LIDARPOINT_H
